1. Single Responsibility Principle (SRP)
Definition: A class should have only one reason to change, meaning it should have only one responsibility or job.
Practical Understanding:
Real-World Example: In an e-commerce application, you may have a Order class that handles order details, payment processing, and email notifications.
Following SRP, you should split this into:
Order class for order details.
PaymentService for handling payments.
NotificationService for sending notifications.
This way, changes to email formats donâ€™t affect order processing logic.

2. Open/Closed Principle (OCP)
Definition: Software entities (classes, modules, functions) should be open for extension, but closed for modification.
Practical Understanding:
Real-World Example: Suppose you have a payment processing system that supports credit cards. Later, you need to add PayPal support.
 Instead of modifying the existing code (which may introduce bugs),
you should extend it by adding a new class to handle PayPal payments.

3. Liskov Substitution Principle (LSP)
Definition: Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.
Practical Understanding:
Real-World Example: Consider a Bird class with a method fly(). If you have a subclass Penguin (which cannot fly),
 the Penguin class violates LSP because replacing a Bird with a Penguin would lead to errors when calling fly().

4. Interface Segregation Principle (ISP)
Definition: No client should be forced to depend on methods it does not use.
Practical Understanding:
Real-World Example: Consider an Employee interface with methods calculateSalary(), submitTimesheet(), and approveLeave().
A regular employee does not need approveLeave() but is forced to implement it. ISP encourages breaking down the interface into smaller, more specific ones.

5. Dependency Inversion Principle (DIP)
Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces).
Practical Understanding:
Real-World Example: If a DatabaseService class directly depends on MySQLDatabase implementation,
it's tightly coupled. With DIP, you create an interface Database and make both DatabaseService and MySQLDatabase depend on this abstraction,
making it easier to switch to another database implementation later.



Summary of Object-Oriented Design Principles:
Single Responsibility Principle (SRP): A class should have only one responsibility.
Open/Closed Principle (OCP): Classes should be open for extension, but closed for modification.
Liskov Substitution Principle (LSP): Subclasses should be substitutable for their base classes.
Interface Segregation Principle (ISP): Clients should not be forced to depend on interfaces they do not use.
Dependency Inversion Principle (DIP): High-level modules should depend on abstractions, not on concrete implementations.



Summary:
These examples show how each principle helps in improving code modularity, flexibility, and maintainability by reducing coupling, separating responsibilities, and ensuring that components are extendable without modification.

SRP: Split classes with multiple responsibilities into distinct classes.
OCP: Use inheritance and abstractions to extend functionality without modifying existing code.
LSP: Ensure subclasses can replace parent classes without altering program behavior.
ISP: Break large interfaces into smaller, more specific ones to avoid irrelevant dependencies.
DIP: Depend on abstractions rather than concrete implementations to reduce coupling.